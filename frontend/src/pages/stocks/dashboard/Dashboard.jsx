import React, { useEffect, useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSpinner } from '@fortawesome/free-solid-svg-icons';
import { predictTicker, getProtectedData } from '../../../apis/index.js';

const Dashboard = () => {
	const [ticker, setTicker] = useState('');
	const [error, setError] = useState(null);
	const [loading, setLoading] = useState(false);
	const [plot, setPlot] = useState(null);
	const [ma100, setMA100] = useState(null);
	const [ma200, setMA200] = useState(null);
	const [prediction, setPrediction] = useState(null);
	const [mse, setMSE] = useState(null);
	const [rmse, setRMSE] = useState(null);
	const [r2, setR2] = useState(null);

	const backendRoot = process.env.REACT_APP_API_URL?.replace('/api', '') || 'http://127.0.0.1:8000'; // move to .env later

	const handleSubmit = async (e) => {
		e.preventDefault();
		setLoading(true);
		setError(null);

		try {
			const response = await predictTicker(ticker);
			const data = response.data;

			setPlot(backendRoot + data.plot_img);
			setMA100(backendRoot + data.plot_100_dma);
			setMA200(backendRoot + data.plot_200_dma);
			setPrediction(backendRoot + data.plot_prediction);
			setMSE(data.mse);
			setRMSE(data.rmse);
			setR2(data.r2);

			if (data.error) {
				setError(data.error);
			}
		} catch (err) {
			console.error('Error from API request', err);
			setError('Something went wrong');
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		getProtectedData()
			.then((res) => {
				console.log('Protected data:', res.data);
			})
			.catch((err) => {
				console.error('Error fetching protected data', err);
			});
	}, []);

	return (
		<>
			<div className='container'>
				<div className='row'>
					<div className='col-md-6 mx-auto'>
						<form onSubmit={handleSubmit}>
							<input
								type='text'
								className='form-control'
								placeholder='Enter stock ticker'
								onChange={(e) => setTicker(e.target.value)}
								required
							/>
							<small>
								{error && (
									<div className='text-danger'>{error}</div>
								)}
							</small>
							<button type='submit' className='btn btn-info mt-3'>
								{loading ? (
									<span>
										<FontAwesomeIcon
											icon={faSpinner}
											spin
										/>
										&nbsp; Please wait...
									</span>
								) : (
									'See prediction'
								)}
							</button>
						</form>
					</div>

					{/* Print pridiction plots */}
					{prediction && (
						<div className='prediction mt-3'>
							<div className='text-light p-5'>
								<h4>üìà Closing Price of {ticker}</h4>
								<p>
									Chart shows the actual daily closing prices
									of the selected stock over the past 10
									years. It provides a historical view of how
									the stock‚Äôs price has changed over time,
									helping you analyze long-term trends and
									price movements.
								</p>
								{plot && (
									<img
										src={plot}
										style={{ maxWidth: '100%' }}
									/>
								)}
							</div>
							<div className='text-light p-5'>
								<h4>üìä 100-Day Moving Average of {ticker}</h4>
								<p>This chart displays two lines:</p>
								<ul>
									<li>
										The daily closing price of the stock
									</li>
									<li>
										The 100-day moving average, which
										smooths out short-term fluctuations and
										highlights long-term trends
									</li>
								</ul>
								<p>
									It's useful for identifying the general
									direction the stock has been moving over the
									full 10-year period.
								</p>
								{ma100 && (
									<img
										src={ma100}
										style={{ maxWidth: '100%' }}
									/>
								)}
							</div>
							<div className='text-light p-5'>
								<h4>üìä 200-Day Moving Average of {ticker}</h4>
								<p>
									This chart includes: </p>
									<ul>
										<li>
											The daily closing price of the stock
										</li>
										<li>The 100-day moving average</li>
										<li>
											The 200-day moving average, which
											provides an even broader view of
											long-term trends
										</li>
									</ul>
									<p>Together, these lines help you better
									understand both medium- and long-term
									momentum in the stock‚Äôs price.
								</p>
								{ma200 && (
									<img
										src={ma200}
										style={{ maxWidth: '100%' }}
									/>
								)}
							</div>
							<div className='text-light p-5'>
								<h4>ü§ñ Final Prediction for {ticker}</h4>
								<p>
									This graph compares two lines for the last
									30% of the data (approximately 3 years): </p>
									<ul>
										<li>The real historical prices</li>
										<li>
											The predicted prices generated by
											our machine learning model
										</li>
									</ul>
									<p>By comparing the two, users can see how
									closely the model‚Äôs predictions match actual
									past prices‚Äîgiving insight into the model‚Äôs
									accuracy and performance.
								</p>
								{prediction && (
									<img
										src={prediction}
										style={{ maxWidth: '100%' }}
									/>
								)}
							</div>
							<div className='text-light mx-5'>
								<h4>Model evaluetion</h4>
								<p>Mean Squared Error (MSE): {mse}</p>
								<p>Root mean Squared Error (RMSE): {rmse}</p>
								<p>R - squared: {r2}</p>
							</div>
						</div>
					)}

					<div className='row justify-content-center'>
						<div className='col-lg-10 col-xl-8'>
							<p
								className='text-light mt-5'
								style={{ fontSize: '0.75rem' }}
							>
								‚ö†Ô∏è{' '}
								<strong className='text-warning'>
									Disclaimer:
								</strong>{' '}
								This project is for educational purposes only
								and should not be used for real financial
								trading. Relying on this model for investment
								decisions may lead to significant financial
								loss.
								<br />
								<strong className='text-warning'>
									Please note:
								</strong>{' '}
								the model does{' '}
								<strong>not predict future prices</strong>. It
								is trained on the first 70% of a real 10-year
								dataset (e.g., 2015‚Äì2021) and generates
								predictions for the remaining 30% (e.g.,
								2022‚Äì2025), which are then compared with actual
								historical prices to evaluate model accuracy.
							</p>
						</div>
					</div>
				</div>
			</div>
		</>
	);
};

export default Dashboard;
