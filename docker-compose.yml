services:
    # PostgreSQL Database
    db:
        env_file:
            - ./backend/.env.prod
        image: postgres:15-alpine
        environment:
            POSTGRES_USER: ${DATABASE_USERNAME}
            POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
            POSTGRES_DB: ${DATABASE_NAME}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}',
                ]
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    # Django Backend (serves both API and React frontend)
    backend:
        build: .
        env_file:
            - ./backend/.env.prod
        volumes:
            - backend_media:/app/media
            - ./resources:/app/resources:ro
            - ./certbot/conf:/etc/letsencrypt
            - ./certbot/www:/var/www/certbot
        depends_on:
            db:
                condition: service_healthy
        restart: unless-stopped
        ports:
            - '80:8000'
            - '443:8000'
        deploy:
            resources:
                limits:
                    memory: 800M
                reservations:
                    memory: 400M

    # Certbot for SSL certificates
    certbot:
        image: certbot/certbot
        volumes:
            - ./certbot/conf:/etc/letsencrypt
            - ./certbot/www:/var/www/certbot
            - ./run-certbot.sh:/run-certbot.sh
        # Keep container running interactively for manual input
        stdin_open: true
        tty: true
        # Will be run via 'docker compose run'

volumes:
    postgres_data:
    backend_media:
